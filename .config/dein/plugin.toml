# CSS のシンタックスハイライト
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = 'css'

# Vue.js の SFC のシンタックスハイライト
[[plugins]]
repo = 'posva/vim-vue'
on_ft = 'vue'
hook_add = '''
  autocmd FileType vue syntax sync fromstart
'''

# fish のシンタックスハイライト
[[plugins]]
repo = 'dag/vim-fish'
on_ft = 'fish'

# TypeScript のシンタックスハイライト
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

# tsx のシンタックスハイライト
[[plugins]]
repo = 'peitalin/vim-jsx-typescript'
on_ft = 'typescriptreact'

# JavaScript のシンタックスハイライト
[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'

# Blade のシンタックスハイライト
[[plugins]]
repo = 'jwalton512/vim-blade'
on_ft = 'blade'

# TOML のシンタックスハイライト
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# Nginx 設定ファイルのシンタックスハイライト
[[plugins]]
repo = 'chr4/nginx.vim'
on_ft = 'nginx'

# HTML のシンタックスハイライト
[[plugins]]
repo = 'othree/html5.vim'
on_ft = 'html'

# Pug のシンタックスハイライト
[[plugins]]
repo = 'digitaltoad/vim-pug'
on_ft = 'pug'

# マークダウンのシンタックスハイライト
[[plugins]]
repo = 'joker1007/vim-markdown-quote-syntax'
on_ft = 'markdown'

# カラースキーマ
[[plugins]]
repo = 'morhetz/gruvbox'
hook_add = '''
  let g:gruvbox_contrast_dark = 'hard'
  colorscheme gruvbox
  set background=dark

augroup TransparentBG
  autocmd!
  autocmd Colorscheme * highlight Normal ctermbg=none
  autocmd Colorscheme * highlight NonText ctermbg=none
  autocmd Colorscheme * highlight LineNr ctermbg=none
  autocmd Colorscheme * highlight Folded ctermbg=none
  autocmd Colorscheme * highlight EndOfBuffer ctermbg=none
augroup end
'''

# editorconfig を使えるように
[[plugins]]
repo = 'editorconfig/editorconfig-vim'

# カラーコードをハイライトする
[[plugins]]
repo = 'ap/vim-css-color'

# 末尾の空白を赤くする
[[plugins]]
repo = 'ntpeters/vim-better-whitespace'

# コードの整形
[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
'''

# インデントのテキストオブジェクトを追加
[[plugins]]
repo = 'michaeljsmith/vim-indent-object'

# 括弧のテキストオブジェクトを追加
[[plugins]]
repo = 'tpope/vim-surround'
hook_add = '''
  " add japanese surrounds
  let g:surround_{char2nr("「")} = "「 \r 」"
  let g:surround_{char2nr("」")} = "「\r」"
  let g:surround_{char2nr("【")} = "【 \r 】"
  let g:surround_{char2nr("】")} = "【\r】"
  let g:surround_{char2nr("（")} = "（ \r ）"
  let g:surround_{char2nr("）")} = "（\r）"
  let g:surround_{char2nr("＜")} = "＜ \r ＞"
  let g:surround_{char2nr("＞")} = "＜\r＞"
  let g:surround_{char2nr("｛")} = "｛ \r ｝"
  let g:surround_{char2nr("｝")} = "｛\r｝"
'''

# 便利なコメントアウト
[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
  let g:NERDSpaceDelims=1
  let g:NERDCompactSexyComs = 1
  let g:NERDDefaultAlign='left'
  let g:NERDCustomDelimiters = {
    \ 'vue': { 'left': '//' },
    \ 'typescriptreact': { 'left': '//', 'leftAlt': '{/*', 'rightAlt': '*/}' }
    \ }
'''

# git のブランチをセッションとして扱う
[[plugins]]
repo = 'ToruIwashita/git-switcher.vim'
hook_add = '''
  " Gswコマンド実行時にセッションの保存の確認を行う
  let g:gsw_save_session_confirm = 'yes'

  " vim起動時のセッション自動ロード設定
  let g:gsw_autoload_session = 'confirm'

  " vim 起動時に、保存したセッションのうちローカルに同じ名前のブランチが存在しないものを削除する。
  " yes、no、confirmを設定可能でデフォルトはno
  let g:gsw_autodelete_sessions_if_branch_not_exists = 'confirm'
'''

# Vim 上でコードを実行する
[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  let g:quickrun_config = {
    \ 'python': {
    \   'command': 'python3'
    \ }, }
'''

# true <-> false などの切り替え
[[plugins]]
repo = 'AndrewRadev/switch.vim'
hook_add = '''
  let g:switch_mapping = 'gs'
'''

# インデントを可視化
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_start_level = 2
  let g:indent_guides_guide_size = 1
'''

# 文字ケースの置換など
[[plugins]]
repo = 'tpope/vim-abolish'

# ファイラーのインタフェース
[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
  call defx#custom#option('_', {
    \ 'split': 'vertical',
    \ 'direction': 'topleft',
    \ 'winwidth': '30',
    \ 'listed': v:true,
    \ 'resume': v:true,
    \ })

  call defx#custom#column('filename', {
    \ 'min_width': 30,
    \ 'max_width': 200,
    \ })

  autocmd FileType defx call s:defx_my_settings()
  function! s:defx_my_settings() abort
    " Define mappings
    nnoremap <silent><buffer><expr> <CR>
    \ defx#do_action('multi', ['drop', 'quit'])
    nnoremap <silent><buffer><expr> c
    \ defx#do_action('copy')
    nnoremap <silent><buffer><expr> m
    \ defx#do_action('move')
    nnoremap <silent><buffer><expr> p
    \ defx#do_action('paste')
    nnoremap <silent><buffer><expr> l
    \ defx#do_action('open_directory')
    nnoremap <silent><buffer><expr> E
    \ defx#do_action('drop', 'split')
    nnoremap <silent><buffer><expr> P
    \ defx#do_action('preview')
    nnoremap <silent><buffer><expr> t
    \ defx#do_action('open', 'tabe')
    nnoremap <silent><buffer><expr> o
    \ defx#do_action('open_tree', 'toggle')
    nnoremap <silent><buffer><expr> K
    \ defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> N
    \ defx#do_action('new_file')
    nnoremap <silent><buffer><expr> M
    \ defx#do_action('new_multiple_files')
    nnoremap <silent><buffer><expr> C
    \ defx#do_action('toggle_columns',
    \                'mark:indent:icon:filename:type:size:time')
    nnoremap <silent><buffer><expr> S
    \ defx#do_action('toggle_sort', 'time')
    nnoremap <silent><buffer><expr> d
    \ defx#do_action('remove')
    nnoremap <silent><buffer><expr> D
    \ defx#do_action('drop')
    nnoremap <silent><buffer><expr> r
    \ defx#do_action('rename')
    nnoremap <silent><buffer><expr> !
    \ defx#do_action('execute_command')
    nnoremap <silent><buffer><expr> x
    \ defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> yy
    \ defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> .
    \ defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> ;
    \ defx#do_action('repeat')
    nnoremap <silent><buffer><expr> h
    \ defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> ~
    \ defx#do_action('cd')
    nnoremap <silent><buffer><expr> q
    \ defx#do_action('quit')
    nnoremap <silent><buffer><expr> <Space>
    \ defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> *
    \ defx#do_action('toggle_select_all')
    nnoremap <silent><buffer><expr> j
    \ line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k
    \ line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> <C-l>
    \ defx#do_action('redraw')
    nnoremap <silent><buffer><expr> <C-g>
    \ defx#do_action('print')
    nnoremap <silent><buffer><expr> cd
    \ defx#do_action('change_vim_cwd')

    setlocal nonumber
    setlocal nowrap
  endfunction
'''

# fuzzy search のインタフェース
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  call denite#custom#option('_', 'split', 'horizontal')
  call denite#custom#option('_', 'vertical_preview', v:true)
  call denite#custom#option('_', 'preview_width', 60)
  call denite#custom#option('_', 'max-candidate-width', 600)

  " Change ignore_globs
  call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
      \ [ '.git/', '.ropeproject/', '__pycache__/',
      \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/', 'node_modules/', 'vendor/'])

  " Change file/rec command.
  call denite#custom#var('file/rec', 'command', [
      \ 'pt',
      \ '--follow',
      \ '--nocolor',
      \ '--nogroup',
      \ '--hidden',
      \ '--ignore=.git',
      \ '--ignore=vendor',
      \ '--ignore=node_modules',
      \ '--ignore=public',
      \  (has('win32') ? '-g:' : '-g='),
      \ ''
      \ ])

  " Pt command on grep source
  call denite#custom#var('grep', 'command', ['pt'])
  call denite#custom#var('grep', 'default_opts', [
    \ '-e',
    \ '--nogroup',
    \ '--nocolor',
    \ '--smart-case',
    \ '--hidden',
    \ '--ignore=.git',
    \ '--ignore=vendor',
    \ '--ignore=node_modules',
    \ '--ignore=public'
    \ ])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'final_opts', [])
  call denite#custom#source('grep', 'args', ['', '', '!'])

  " Chagen buffer command.
  call denite#custom#var('buffer', 'exclude_filetypes', ['denite', 'defx'])

  " Cutom action
  call denite#custom#action('file,directory', 'defx',
    \ {context -> execute('echo "hello"')})

  " Change mappings.
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
                \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d
                \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
                \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
                \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
                \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> x
                \ denite#do_map('toggle_select').'j'
    nnoremap <silent><buffer><expr> s
                \ denite#do_map('do_action', 'split')
    nnoremap <silent><buffer><expr> v
                \ denite#do_map('do_action', 'vsplit')
    nnoremap <silent><buffer><expr> e
                \ denite#do_map('do_action', 'defx')
  endfunction
'''

# git を扱う
[[plugins]]
repo = 'tpope/vim-fugitive'

# ファイルをGitHubで開く
[[plugins]]
repo = 'tpope/vim-rhubarb'

# 終了時にセッションとしてスナップショットを保存
[[plugins]]
repo = 'yaktak/sestry.vim'

# LSP を簡単に設定する
[[plugins]]
repo = 'neovim/nvim-lspconfig'

# LSP と deoplete を連携
[[plugins]]
repo = 'Shougo/deoplete-lsp'

# Nvim lsp client 上で Linter を動かす
[[plugins]]
repo = 'mfussenegger/nvim-lint'

# vim 上でテスト
[[plugins]]
repo = 'vim-test/vim-test'
depends = ['tpope/vim-dispatch']
hook_add = '''
  let g:test#project_root = config#get('project_root_dir')
  let g:test#php#phpunit#executable = config#get('test_command_phpunit')

  " Nearest のとき、'test' で始まる日本語メソッド名の場合にヒットさせる
  let g:test#php#phpunit#test_patterns = {
    \ 'test': [
      \ '\v^\s*public function (test.+)\(',
      \ '\v^\s*\*\s*(\@test)',
      \ '\v^\s*\/\*\*\s*(\@test)\s*\*\/',
    \],
    \ 'namespace': [],
  \}

  " Nearest のとき、 @test + 日本語メソッド名の場合にヒットさせる
  let g:test#php#patterns = {
    \ 'test':      ['\v^\s*public function (.+)\('],
    \ 'namespace': [],
  \}

  let g:test#strategy = 'dispatch'
'''

# ビルドを非同期で実行する
[[plugins]]
repo = 'tpope/vim-dispatch'

# メモ機能
[[plugins]]
repo = 'glidenote/memolist.vim'
hook_source = '''
  let g:memolist_memo_suffix = 'md'
'''

# SQLフォーマッター
[[plugins]]
repo = 'mattn/vim-sqlfmt'
hook_source = '''
'''

# Nim用のいろいろな言語サポート
[[plugins]]
repo = 'zah/nim.vim'
on_ft = 'nim'

# オートセーブ
[[plugins]]
repo = 'vim-scripts/vim-auto-save'
hook_add = '''
  let g:auto_save = 1  " enable AutoSave on Vim startup
  let g:auto_save_in_insert_mode = 0  " do not save while in insert mode
  "let g:auto_save_silent = 1  " do not display the auto-save notification
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
